{"version":3,"sources":["utils/index.tsx","hooks/useContract.ts","views/Home/index.tsx","config/constants/tokens.ts","config/constants/contracts.ts"],"names":["getContract","address","ABI","library","account","value","getAddress","isAddress","AddressZero","Error","Contract","getSigner","connectUnchecked","getProviderOrSigner","chain","process","RPC_URL","sample","simpleRpcProvider","ethers","providers","JsonRpcProvider","useActiveWeb3React","useWeb3React","chainId","web3React","refEth","useRef","useState","provider","setprovider","useEffect","current","useContract","withSignerIfPossible","useMemo","undefined","error","toast","JSON","stringify","Wrapper","styled","div","Home","contract","ERC20_ABI","handleApprove","a","approve","catch","tx","wait","status","success","errStr","onClick"],"mappings":"u7EA2BO,SAASA,EAAYC,EAAiBC,EAAUC,EAAuBC,GAC1E,IApBG,SAAmBC,GACtB,IACE,OAAOC,YAAWD,GAClB,SACA,OAAO,GAgBJE,CAAUN,IAAYA,IAAYO,IACnC,MAAMC,MAAM,gCAAD,OAAiCR,EAAjC,OAGf,OAAO,IAAIS,IAAST,EAASC,EAV1B,SAA6BC,EAAuBC,GACvD,OAAOA,EANJ,SAAmBD,EAAuBC,GAC7C,OAAOD,EAAQQ,UAAUP,GAASQ,mBAKjBD,CAAUR,EAASC,GAAWD,EASbU,CAAoBV,EAASC,I,oCCtB7DU,EAAQ,CAACC,OAETC,EAAUC,IADF,CAACF,0BAETG,EAAoB,IAAIC,IAAOC,UAAUC,gBAAgBL,GAEzDM,EAAqB,WACzB,MAA2CC,cAAnCpB,EAAR,EAAQA,QAASqB,EAAjB,EAAiBA,QAAYC,EAA7B,iBACMC,EAASC,iBAAOxB,GACtB,EAAgCyB,mBAASzB,GAAWe,GAApD,mBAAOW,EAAP,KAAiBC,EAAjB,KASA,OAPAC,qBAAU,WACJ5B,IAAYuB,EAAOM,UACrBF,EAAY3B,GAAWe,GACvBQ,EAAOM,QAAU7B,KAElB,CAACA,IAEG,aAAEA,QAAS0B,EAAUL,QAAO,OAAEA,QAAF,IAAEA,IAAWV,GAAUW,IAO5D,SAASQ,EAAYhC,EAA6BC,GAAyD,IAA/CgC,IAA8C,yDACxG,EAA6BZ,IAArBnB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QACjB,OAAO+B,mBAAQ,WACb,IAAKlC,IAAYC,IAAQC,EAAS,OAAO,KACzC,IACE,OAAOH,EAAYC,EAASC,EAAKC,EAAS+B,GAAwB9B,EAAUA,OAAUgC,GACtF,MAAOC,GAEP,OADAC,IAAMD,MAAME,KAAKC,UAAUH,IACpB,QAER,CAACpC,EAASC,EAAKC,EAAS+B,EAAsB9B,IAO5C,I,UC3CDqC,EAAUC,IAAOC,IAAV,oMAuCEC,UA3BQ,WACnB,ID8BsCV,EC9BhCW,ED+BDZ,EEpDe,6CFoDMa,EAAWZ,GC7B/Ba,EAAa,uCAAG,8BAAAC,EAAA,+EAEGH,EAASI,QEzBL,6CFyB+B,sEAAsEC,OAAM,SAACb,GAC7H,MAAMA,KAHI,cAERc,EAFQ,gBAKQA,EAAGC,OALX,cAMEC,OACRf,IAAMgB,QAAQ,mBAEdhB,IAAMD,MAAM,gBATN,kDAYRkB,EAAShB,KAAKC,UAAL,MACfF,IAAMD,MAAMkB,GAbE,0DAAH,qDAiBnB,OACI,cAACd,EAAD,UACI,wBAAQe,QAAST,EAAjB","file":"static/js/4.729d6aeb.chunk.js","sourcesContent":["import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { toast } from \"react-toastify\"\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n    try {\n      return getAddress(value)\n    } catch {\n      return false\n    }\n  }\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n    return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n    return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n    if (!isAddress(address) || address === AddressZero) {\n        throw Error(`Invalid 'address' parameter '${address}'.`)\n    }\n\n    return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}","import { useMemo,useRef,useState,useEffect } from 'react'\nimport {ethers} from 'ethers'\nimport { Contract } from '@ethersproject/contracts'\nimport { useWeb3React } from '@web3-react/core'\nimport sample from 'lodash/sample'\n// Imports below migrated from Exchange useContract.ts\nimport ERC20_ABI from 'config/abi/erc20.json'\nimport { getContract } from 'utils'\nimport { toast } from \"react-toastify\"\n\nconst chain = [process.env.REACT_APP_CHAIN_ID]\nconst nodes = [process.env.REACT_APP_NODE_1]\nconst RPC_URL = sample(nodes)\nconst simpleRpcProvider = new ethers.providers.JsonRpcProvider(RPC_URL)\n\nconst useActiveWeb3React = () => {\n  const { library, chainId, ...web3React } = useWeb3React();\n  const refEth = useRef(library);\n  const [provider, setprovider] = useState(library || simpleRpcProvider);\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setprovider(library || simpleRpcProvider);\n      refEth.current = library\n    }\n  }, [library]);\n\n  return { library: provider, chainId: chainId ?? chain, ...web3React }\n}\n\nexport default useActiveWeb3React\n\n\n// returns null on errors\nfunction useContract(address: string | undefined, ABI: any, withSignerIfPossible = true): Contract | null {\n  const { library, account } = useActiveWeb3React()\n  return useMemo(() => {\n    if (!address || !ABI || !library) return null\n    try {\n      return getContract(address, ABI, library, withSignerIfPossible && account ? account : undefined)\n    } catch (error) {\n      toast.error(JSON.stringify(error))\n      return null\n    }\n  }, [address, ABI, library, withSignerIfPossible, account])\n}\n\nexport function useTokenContract(tokenAddress?: string, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(tokenAddress, ERC20_ABI, withSignerIfPossible)\n}\n\nexport const useERC20 = (address: string, withSignerIfPossible?: boolean) => {\n  return useContract(address, ERC20_ABI, withSignerIfPossible)\n}","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useERC20 } from 'hooks/useContract'\nimport { toast } from \"react-toastify\"\nimport {RarityRingRewards} from 'config/constants/contracts'\nimport {spiritLP} from 'config/constants/tokens'\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    padding: 80px 20%;\n\n    button {\n        font-size: 36px;\n        padding: 8px 12px;\n    }\n`\n\nconst Home: React.FC = () => {\n    const contract = useERC20(spiritLP)\n\n    const handleApprove = async () => {\n        try{\n            const tx = await contract.approve(RarityRingRewards,'0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff').catch((error) => {\n                throw error\n            })\n            const receipt = await tx.wait()\n                if (receipt.status) {\n                    toast.success('approve success')\n                }else{\n                    toast.error('approve fail')\n            }\n        }catch(error){\n            const errStr = JSON.stringify(error)\n            toast.error(errStr)\n        }\n    }\n\n    return (\n        <Wrapper>\n            <button onClick={handleApprove}>Approve</button>\n        </Wrapper>\n    )\n}\n\nexport default Home","export const spiritLP = \"0x415EC693A78C526962e8A0c1a53e3Ba515696231\"","export const RarityRingRewards = \"0x377F5BAC5CCf7a3F06285F45aD1B28a4E25C7C44\""],"sourceRoot":""}